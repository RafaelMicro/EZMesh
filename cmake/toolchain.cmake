
if(${CONFIG_CROSS_COMPILER_PATH} STREQUAL "" OR 
   ${CONFIG_CROSS_COMPILER_PREFIX} STREQUAL "" OR 
   ${CONFIG_CROSS_COMPILER_SYSTEM_NAME} STREQUAL "" OR 
   ${CONFIG_CROSS_COMPILER_SYSTEM_PROCESSOR} STREQUAL "")
    message( FATAL_ERROR "Please setting cross compiler: \
            CONFIG_CROSS_COMPILER_PATH, CONFIG_CROSS_COMPILER_PREFIX \
            CONFIG_CROSS_COMPILER_SYSTEM_NAME and CONFIG_CROSS_COMPILER_SYSTEM_PROCESSOR" )
endif()

set(CMAKE_SYSTEM_NAME      ${CONFIG_CROSS_COMPILER_SYSTEM_NAME})# Generic
set(CMAKE_SYSTEM_PROCESSOR ${CONFIG_CROSS_COMPILER_SYSTEM_PROCESSOR}) #ARM

set(CROSS_COMPILE ${CONFIG_CROSS_COMPILER_PATH}/${CONFIG_CROSS_COMPILER_PREFIX}-)

# specify cross compilers and tools
SET(CMAKE_C_COMPILER ${CROSS_COMPILE}gcc CACHE INTERNAL "")
SET(CMAKE_CXX_COMPILER ${CROSS_COMPILE}g++ CACHE INTERNAL "")
set(CMAKE_ASM_COMPILER ${CROSS_COMPILE}gcc CACHE INTERNAL "")
set(CMAKE_LINKER ${CROSS_COMPILE}ld CACHE INTERNAL "")
set(CMAKE_AR ${CROSS_COMPILE}ar CACHE INTERNAL "")
set(CMAKE_RANLIB ${CROSS_COMPILE}ranlib CACHE INTERNAL "")
set(CMAKE_OBJCOPY ${CROSS_COMPILE}objcopy CACHE INTERNAL "")
set(CMAKE_OBJDUMP ${CROSS_COMPILE}objdump CACHE INTERNAL "")
set(CMAKE_SIZE ${CROSS_COMPILE}size CACHE INTERNAL "")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread" )
set(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu99   -pthread" )


set(CMAKE_C_COMPILER_WORKS 1)
set(CMAKE_CXX_COMPILER_WORKS 1)

set(CMAKE_FIND_ROOT_PATH ${CROSS_COMPILE}gcc)
# search for programs in the build host directories
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)