// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thread_telemetry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_thread_5ftelemetry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_thread_5ftelemetry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_thread_5ftelemetry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_thread_5ftelemetry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace threadnetwork {
class TelemetryData;
class TelemetryDataDefaultTypeInternal;
extern TelemetryDataDefaultTypeInternal _TelemetryData_default_instance_;
class TelemetryData_WpanStats;
class TelemetryData_WpanStatsDefaultTypeInternal;
extern TelemetryData_WpanStatsDefaultTypeInternal _TelemetryData_WpanStats_default_instance_;
}  // namespace threadnetwork
PROTOBUF_NAMESPACE_OPEN
template<> ::threadnetwork::TelemetryData* Arena::CreateMaybeMessage<::threadnetwork::TelemetryData>(Arena*);
template<> ::threadnetwork::TelemetryData_WpanStats* Arena::CreateMaybeMessage<::threadnetwork::TelemetryData_WpanStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace threadnetwork {

enum TelemetryData_NodeType : int {
  TelemetryData_NodeType_NODE_TYPE_UNSPECIFIED = 0,
  TelemetryData_NodeType_NODE_TYPE_ROUTER = 1,
  TelemetryData_NodeType_NODE_TYPE_END = 2,
  TelemetryData_NodeType_NODE_TYPE_SLEEPY_END = 3,
  TelemetryData_NodeType_NODE_TYPE_MINIMAL_END = 4,
  TelemetryData_NodeType_NODE_TYPE_OFFLINE = 5,
  TelemetryData_NodeType_NODE_TYPE_DISABLED = 6,
  TelemetryData_NodeType_NODE_TYPE_DETACHED = 7,
  TelemetryData_NodeType_NODE_TYPE_NL_LURKER = 16,
  TelemetryData_NodeType_NODE_TYPE_COMMISSIONER = 32,
  TelemetryData_NodeType_NODE_TYPE_LEADER = 64
};
bool TelemetryData_NodeType_IsValid(int value);
constexpr TelemetryData_NodeType TelemetryData_NodeType_NodeType_MIN = TelemetryData_NodeType_NODE_TYPE_UNSPECIFIED;
constexpr TelemetryData_NodeType TelemetryData_NodeType_NodeType_MAX = TelemetryData_NodeType_NODE_TYPE_LEADER;
constexpr int TelemetryData_NodeType_NodeType_ARRAYSIZE = TelemetryData_NodeType_NodeType_MAX + 1;

const std::string& TelemetryData_NodeType_Name(TelemetryData_NodeType value);
template<typename T>
inline const std::string& TelemetryData_NodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TelemetryData_NodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TelemetryData_NodeType_Name.");
  return TelemetryData_NodeType_Name(static_cast<TelemetryData_NodeType>(enum_t_value));
}
bool TelemetryData_NodeType_Parse(
    const std::string& name, TelemetryData_NodeType* value);
// ===================================================================

class TelemetryData_WpanStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:threadnetwork.TelemetryData.WpanStats) */ {
 public:
  inline TelemetryData_WpanStats() : TelemetryData_WpanStats(nullptr) {};
  virtual ~TelemetryData_WpanStats();

  TelemetryData_WpanStats(const TelemetryData_WpanStats& from);
  TelemetryData_WpanStats(TelemetryData_WpanStats&& from) noexcept
    : TelemetryData_WpanStats() {
    *this = ::std::move(from);
  }

  inline TelemetryData_WpanStats& operator=(const TelemetryData_WpanStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryData_WpanStats& operator=(TelemetryData_WpanStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TelemetryData_WpanStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryData_WpanStats* internal_default_instance() {
    return reinterpret_cast<const TelemetryData_WpanStats*>(
               &_TelemetryData_WpanStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TelemetryData_WpanStats& a, TelemetryData_WpanStats& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryData_WpanStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryData_WpanStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TelemetryData_WpanStats* New() const final {
    return CreateMaybeMessage<TelemetryData_WpanStats>(nullptr);
  }

  TelemetryData_WpanStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TelemetryData_WpanStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TelemetryData_WpanStats& from);
  void MergeFrom(const TelemetryData_WpanStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelemetryData_WpanStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "threadnetwork.TelemetryData.WpanStats";
  }
  protected:
  explicit TelemetryData_WpanStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhyRxFieldNumber = 1,
    kPhyTxFieldNumber = 2,
    kMacUnicastRxFieldNumber = 3,
    kMacUnicastTxFieldNumber = 4,
    kMacBroadcastRxFieldNumber = 5,
    kMacBroadcastTxFieldNumber = 6,
    kMacTxAckReqFieldNumber = 7,
    kMacTxNoAckReqFieldNumber = 8,
    kMacTxAckedFieldNumber = 9,
    kMacTxDataFieldNumber = 10,
    kMacTxDataPollFieldNumber = 11,
    kMacTxBeaconFieldNumber = 12,
    kMacTxBeaconReqFieldNumber = 13,
    kMacTxOtherPktFieldNumber = 14,
    kMacTxRetryFieldNumber = 15,
    kMacRxDataFieldNumber = 16,
    kMacRxDataPollFieldNumber = 17,
    kMacRxBeaconFieldNumber = 18,
    kMacRxBeaconReqFieldNumber = 19,
    kMacRxOtherPktFieldNumber = 20,
    kMacRxFilterWhitelistFieldNumber = 21,
    kMacRxFilterDestAddrFieldNumber = 22,
    kMacTxFailCcaFieldNumber = 23,
    kMacRxFailDecryptFieldNumber = 24,
    kMacRxFailNoFrameFieldNumber = 25,
    kMacRxFailUnknownNeighborFieldNumber = 26,
    kMacRxFailInvalidSrcAddrFieldNumber = 27,
    kMacRxFailFcsFieldNumber = 28,
    kMacRxFailOtherFieldNumber = 29,
    kIpTxSuccessFieldNumber = 30,
    kIpRxSuccessFieldNumber = 31,
    kIpTxFailureFieldNumber = 32,
    kIpRxFailureFieldNumber = 33,
    kNodeTypeFieldNumber = 34,
    kChannelFieldNumber = 35,
    kRadioTxPowerFieldNumber = 36,
    kMacCcaFailRateFieldNumber = 37,
  };
  // optional int32 phy_rx = 1;
  bool has_phy_rx() const;
  private:
  bool _internal_has_phy_rx() const;
  public:
  void clear_phy_rx();
  ::PROTOBUF_NAMESPACE_ID::int32 phy_rx() const;
  void set_phy_rx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phy_rx() const;
  void _internal_set_phy_rx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 phy_tx = 2;
  bool has_phy_tx() const;
  private:
  bool _internal_has_phy_tx() const;
  public:
  void clear_phy_tx();
  ::PROTOBUF_NAMESPACE_ID::int32 phy_tx() const;
  void set_phy_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phy_tx() const;
  void _internal_set_phy_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_unicast_rx = 3;
  bool has_mac_unicast_rx() const;
  private:
  bool _internal_has_mac_unicast_rx() const;
  public:
  void clear_mac_unicast_rx();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_unicast_rx() const;
  void set_mac_unicast_rx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_unicast_rx() const;
  void _internal_set_mac_unicast_rx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_unicast_tx = 4;
  bool has_mac_unicast_tx() const;
  private:
  bool _internal_has_mac_unicast_tx() const;
  public:
  void clear_mac_unicast_tx();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_unicast_tx() const;
  void set_mac_unicast_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_unicast_tx() const;
  void _internal_set_mac_unicast_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_broadcast_rx = 5;
  bool has_mac_broadcast_rx() const;
  private:
  bool _internal_has_mac_broadcast_rx() const;
  public:
  void clear_mac_broadcast_rx();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_broadcast_rx() const;
  void set_mac_broadcast_rx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_broadcast_rx() const;
  void _internal_set_mac_broadcast_rx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_broadcast_tx = 6;
  bool has_mac_broadcast_tx() const;
  private:
  bool _internal_has_mac_broadcast_tx() const;
  public:
  void clear_mac_broadcast_tx();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_broadcast_tx() const;
  void set_mac_broadcast_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_broadcast_tx() const;
  void _internal_set_mac_broadcast_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_tx_ack_req = 7;
  bool has_mac_tx_ack_req() const;
  private:
  bool _internal_has_mac_tx_ack_req() const;
  public:
  void clear_mac_tx_ack_req();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_ack_req() const;
  void set_mac_tx_ack_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_tx_ack_req() const;
  void _internal_set_mac_tx_ack_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_tx_no_ack_req = 8;
  bool has_mac_tx_no_ack_req() const;
  private:
  bool _internal_has_mac_tx_no_ack_req() const;
  public:
  void clear_mac_tx_no_ack_req();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_no_ack_req() const;
  void set_mac_tx_no_ack_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_tx_no_ack_req() const;
  void _internal_set_mac_tx_no_ack_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_tx_acked = 9;
  bool has_mac_tx_acked() const;
  private:
  bool _internal_has_mac_tx_acked() const;
  public:
  void clear_mac_tx_acked();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_acked() const;
  void set_mac_tx_acked(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_tx_acked() const;
  void _internal_set_mac_tx_acked(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_tx_data = 10;
  bool has_mac_tx_data() const;
  private:
  bool _internal_has_mac_tx_data() const;
  public:
  void clear_mac_tx_data();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_data() const;
  void set_mac_tx_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_tx_data() const;
  void _internal_set_mac_tx_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_tx_data_poll = 11;
  bool has_mac_tx_data_poll() const;
  private:
  bool _internal_has_mac_tx_data_poll() const;
  public:
  void clear_mac_tx_data_poll();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_data_poll() const;
  void set_mac_tx_data_poll(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_tx_data_poll() const;
  void _internal_set_mac_tx_data_poll(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_tx_beacon = 12;
  bool has_mac_tx_beacon() const;
  private:
  bool _internal_has_mac_tx_beacon() const;
  public:
  void clear_mac_tx_beacon();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_beacon() const;
  void set_mac_tx_beacon(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_tx_beacon() const;
  void _internal_set_mac_tx_beacon(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_tx_beacon_req = 13;
  bool has_mac_tx_beacon_req() const;
  private:
  bool _internal_has_mac_tx_beacon_req() const;
  public:
  void clear_mac_tx_beacon_req();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_beacon_req() const;
  void set_mac_tx_beacon_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_tx_beacon_req() const;
  void _internal_set_mac_tx_beacon_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_tx_other_pkt = 14;
  bool has_mac_tx_other_pkt() const;
  private:
  bool _internal_has_mac_tx_other_pkt() const;
  public:
  void clear_mac_tx_other_pkt();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_other_pkt() const;
  void set_mac_tx_other_pkt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_tx_other_pkt() const;
  void _internal_set_mac_tx_other_pkt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_tx_retry = 15;
  bool has_mac_tx_retry() const;
  private:
  bool _internal_has_mac_tx_retry() const;
  public:
  void clear_mac_tx_retry();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_retry() const;
  void set_mac_tx_retry(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_tx_retry() const;
  void _internal_set_mac_tx_retry(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_data = 16;
  bool has_mac_rx_data() const;
  private:
  bool _internal_has_mac_rx_data() const;
  public:
  void clear_mac_rx_data();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_data() const;
  void set_mac_rx_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_data() const;
  void _internal_set_mac_rx_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_data_poll = 17;
  bool has_mac_rx_data_poll() const;
  private:
  bool _internal_has_mac_rx_data_poll() const;
  public:
  void clear_mac_rx_data_poll();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_data_poll() const;
  void set_mac_rx_data_poll(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_data_poll() const;
  void _internal_set_mac_rx_data_poll(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_beacon = 18;
  bool has_mac_rx_beacon() const;
  private:
  bool _internal_has_mac_rx_beacon() const;
  public:
  void clear_mac_rx_beacon();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_beacon() const;
  void set_mac_rx_beacon(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_beacon() const;
  void _internal_set_mac_rx_beacon(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_beacon_req = 19;
  bool has_mac_rx_beacon_req() const;
  private:
  bool _internal_has_mac_rx_beacon_req() const;
  public:
  void clear_mac_rx_beacon_req();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_beacon_req() const;
  void set_mac_rx_beacon_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_beacon_req() const;
  void _internal_set_mac_rx_beacon_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_other_pkt = 20;
  bool has_mac_rx_other_pkt() const;
  private:
  bool _internal_has_mac_rx_other_pkt() const;
  public:
  void clear_mac_rx_other_pkt();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_other_pkt() const;
  void set_mac_rx_other_pkt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_other_pkt() const;
  void _internal_set_mac_rx_other_pkt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_filter_whitelist = 21;
  bool has_mac_rx_filter_whitelist() const;
  private:
  bool _internal_has_mac_rx_filter_whitelist() const;
  public:
  void clear_mac_rx_filter_whitelist();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_filter_whitelist() const;
  void set_mac_rx_filter_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_filter_whitelist() const;
  void _internal_set_mac_rx_filter_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_filter_dest_addr = 22;
  bool has_mac_rx_filter_dest_addr() const;
  private:
  bool _internal_has_mac_rx_filter_dest_addr() const;
  public:
  void clear_mac_rx_filter_dest_addr();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_filter_dest_addr() const;
  void set_mac_rx_filter_dest_addr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_filter_dest_addr() const;
  void _internal_set_mac_rx_filter_dest_addr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_tx_fail_cca = 23;
  bool has_mac_tx_fail_cca() const;
  private:
  bool _internal_has_mac_tx_fail_cca() const;
  public:
  void clear_mac_tx_fail_cca();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_fail_cca() const;
  void set_mac_tx_fail_cca(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_tx_fail_cca() const;
  void _internal_set_mac_tx_fail_cca(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_fail_decrypt = 24;
  bool has_mac_rx_fail_decrypt() const;
  private:
  bool _internal_has_mac_rx_fail_decrypt() const;
  public:
  void clear_mac_rx_fail_decrypt();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_decrypt() const;
  void set_mac_rx_fail_decrypt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_fail_decrypt() const;
  void _internal_set_mac_rx_fail_decrypt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_fail_no_frame = 25;
  bool has_mac_rx_fail_no_frame() const;
  private:
  bool _internal_has_mac_rx_fail_no_frame() const;
  public:
  void clear_mac_rx_fail_no_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_no_frame() const;
  void set_mac_rx_fail_no_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_fail_no_frame() const;
  void _internal_set_mac_rx_fail_no_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_fail_unknown_neighbor = 26;
  bool has_mac_rx_fail_unknown_neighbor() const;
  private:
  bool _internal_has_mac_rx_fail_unknown_neighbor() const;
  public:
  void clear_mac_rx_fail_unknown_neighbor();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_unknown_neighbor() const;
  void set_mac_rx_fail_unknown_neighbor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_fail_unknown_neighbor() const;
  void _internal_set_mac_rx_fail_unknown_neighbor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_fail_invalid_src_addr = 27;
  bool has_mac_rx_fail_invalid_src_addr() const;
  private:
  bool _internal_has_mac_rx_fail_invalid_src_addr() const;
  public:
  void clear_mac_rx_fail_invalid_src_addr();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_invalid_src_addr() const;
  void set_mac_rx_fail_invalid_src_addr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_fail_invalid_src_addr() const;
  void _internal_set_mac_rx_fail_invalid_src_addr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_fail_fcs = 28;
  bool has_mac_rx_fail_fcs() const;
  private:
  bool _internal_has_mac_rx_fail_fcs() const;
  public:
  void clear_mac_rx_fail_fcs();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_fcs() const;
  void set_mac_rx_fail_fcs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_fail_fcs() const;
  void _internal_set_mac_rx_fail_fcs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mac_rx_fail_other = 29;
  bool has_mac_rx_fail_other() const;
  private:
  bool _internal_has_mac_rx_fail_other() const;
  public:
  void clear_mac_rx_fail_other();
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_other() const;
  void set_mac_rx_fail_other(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mac_rx_fail_other() const;
  void _internal_set_mac_rx_fail_other(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ip_tx_success = 30;
  bool has_ip_tx_success() const;
  private:
  bool _internal_has_ip_tx_success() const;
  public:
  void clear_ip_tx_success();
  ::PROTOBUF_NAMESPACE_ID::int32 ip_tx_success() const;
  void set_ip_tx_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip_tx_success() const;
  void _internal_set_ip_tx_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ip_rx_success = 31;
  bool has_ip_rx_success() const;
  private:
  bool _internal_has_ip_rx_success() const;
  public:
  void clear_ip_rx_success();
  ::PROTOBUF_NAMESPACE_ID::int32 ip_rx_success() const;
  void set_ip_rx_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip_rx_success() const;
  void _internal_set_ip_rx_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ip_tx_failure = 32;
  bool has_ip_tx_failure() const;
  private:
  bool _internal_has_ip_tx_failure() const;
  public:
  void clear_ip_tx_failure();
  ::PROTOBUF_NAMESPACE_ID::int32 ip_tx_failure() const;
  void set_ip_tx_failure(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip_tx_failure() const;
  void _internal_set_ip_tx_failure(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ip_rx_failure = 33;
  bool has_ip_rx_failure() const;
  private:
  bool _internal_has_ip_rx_failure() const;
  public:
  void clear_ip_rx_failure();
  ::PROTOBUF_NAMESPACE_ID::int32 ip_rx_failure() const;
  void set_ip_rx_failure(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip_rx_failure() const;
  void _internal_set_ip_rx_failure(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 node_type = 34;
  bool has_node_type() const;
  private:
  bool _internal_has_node_type() const;
  public:
  void clear_node_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_type() const;
  void set_node_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_type() const;
  void _internal_set_node_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 channel = 35;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 radio_tx_power = 36;
  bool has_radio_tx_power() const;
  private:
  bool _internal_has_radio_tx_power() const;
  public:
  void clear_radio_tx_power();
  ::PROTOBUF_NAMESPACE_ID::int32 radio_tx_power() const;
  void set_radio_tx_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_radio_tx_power() const;
  void _internal_set_radio_tx_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float mac_cca_fail_rate = 37;
  bool has_mac_cca_fail_rate() const;
  private:
  bool _internal_has_mac_cca_fail_rate() const;
  public:
  void clear_mac_cca_fail_rate();
  float mac_cca_fail_rate() const;
  void set_mac_cca_fail_rate(float value);
  private:
  float _internal_mac_cca_fail_rate() const;
  void _internal_set_mac_cca_fail_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:threadnetwork.TelemetryData.WpanStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 phy_rx_;
  ::PROTOBUF_NAMESPACE_ID::int32 phy_tx_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_unicast_rx_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_unicast_tx_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_broadcast_rx_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_broadcast_tx_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_ack_req_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_no_ack_req_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_acked_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_data_poll_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_beacon_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_beacon_req_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_other_pkt_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_retry_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_data_poll_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_beacon_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_beacon_req_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_other_pkt_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_filter_whitelist_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_filter_dest_addr_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_tx_fail_cca_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_decrypt_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_no_frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_unknown_neighbor_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_invalid_src_addr_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_fcs_;
  ::PROTOBUF_NAMESPACE_ID::int32 mac_rx_fail_other_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_tx_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_rx_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_tx_failure_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_rx_failure_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 radio_tx_power_;
  float mac_cca_fail_rate_;
  friend struct ::TableStruct_thread_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetryData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:threadnetwork.TelemetryData) */ {
 public:
  inline TelemetryData() : TelemetryData(nullptr) {};
  virtual ~TelemetryData();

  TelemetryData(const TelemetryData& from);
  TelemetryData(TelemetryData&& from) noexcept
    : TelemetryData() {
    *this = ::std::move(from);
  }

  inline TelemetryData& operator=(const TelemetryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryData& operator=(TelemetryData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TelemetryData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryData* internal_default_instance() {
    return reinterpret_cast<const TelemetryData*>(
               &_TelemetryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TelemetryData& a, TelemetryData& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TelemetryData* New() const final {
    return CreateMaybeMessage<TelemetryData>(nullptr);
  }

  TelemetryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TelemetryData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TelemetryData& from);
  void MergeFrom(const TelemetryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelemetryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "threadnetwork.TelemetryData";
  }
  protected:
  explicit TelemetryData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TelemetryData_WpanStats WpanStats;

  typedef TelemetryData_NodeType NodeType;
  static constexpr NodeType NODE_TYPE_UNSPECIFIED =
    TelemetryData_NodeType_NODE_TYPE_UNSPECIFIED;
  static constexpr NodeType NODE_TYPE_ROUTER =
    TelemetryData_NodeType_NODE_TYPE_ROUTER;
  static constexpr NodeType NODE_TYPE_END =
    TelemetryData_NodeType_NODE_TYPE_END;
  static constexpr NodeType NODE_TYPE_SLEEPY_END =
    TelemetryData_NodeType_NODE_TYPE_SLEEPY_END;
  static constexpr NodeType NODE_TYPE_MINIMAL_END =
    TelemetryData_NodeType_NODE_TYPE_MINIMAL_END;
  static constexpr NodeType NODE_TYPE_OFFLINE =
    TelemetryData_NodeType_NODE_TYPE_OFFLINE;
  static constexpr NodeType NODE_TYPE_DISABLED =
    TelemetryData_NodeType_NODE_TYPE_DISABLED;
  static constexpr NodeType NODE_TYPE_DETACHED =
    TelemetryData_NodeType_NODE_TYPE_DETACHED;
  static constexpr NodeType NODE_TYPE_NL_LURKER =
    TelemetryData_NodeType_NODE_TYPE_NL_LURKER;
  static constexpr NodeType NODE_TYPE_COMMISSIONER =
    TelemetryData_NodeType_NODE_TYPE_COMMISSIONER;
  static constexpr NodeType NODE_TYPE_LEADER =
    TelemetryData_NodeType_NODE_TYPE_LEADER;
  static inline bool NodeType_IsValid(int value) {
    return TelemetryData_NodeType_IsValid(value);
  }
  static constexpr NodeType NodeType_MIN =
    TelemetryData_NodeType_NodeType_MIN;
  static constexpr NodeType NodeType_MAX =
    TelemetryData_NodeType_NodeType_MAX;
  static constexpr int NodeType_ARRAYSIZE =
    TelemetryData_NodeType_NodeType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NodeType_Name.");
    return TelemetryData_NodeType_Name(enum_t_value);
  }
  static inline bool NodeType_Parse(const std::string& name,
      NodeType* value) {
    return TelemetryData_NodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWpanStatsFieldNumber = 1,
  };
  // optional .threadnetwork.TelemetryData.WpanStats wpan_stats = 1;
  bool has_wpan_stats() const;
  private:
  bool _internal_has_wpan_stats() const;
  public:
  void clear_wpan_stats();
  const ::threadnetwork::TelemetryData_WpanStats& wpan_stats() const;
  ::threadnetwork::TelemetryData_WpanStats* release_wpan_stats();
  ::threadnetwork::TelemetryData_WpanStats* mutable_wpan_stats();
  void set_allocated_wpan_stats(::threadnetwork::TelemetryData_WpanStats* wpan_stats);
  private:
  const ::threadnetwork::TelemetryData_WpanStats& _internal_wpan_stats() const;
  ::threadnetwork::TelemetryData_WpanStats* _internal_mutable_wpan_stats();
  public:
  void unsafe_arena_set_allocated_wpan_stats(
      ::threadnetwork::TelemetryData_WpanStats* wpan_stats);
  ::threadnetwork::TelemetryData_WpanStats* unsafe_arena_release_wpan_stats();

  // @@protoc_insertion_point(class_scope:threadnetwork.TelemetryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::threadnetwork::TelemetryData_WpanStats* wpan_stats_;
  friend struct ::TableStruct_thread_5ftelemetry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TelemetryData_WpanStats

// optional int32 phy_rx = 1;
inline bool TelemetryData_WpanStats::_internal_has_phy_rx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_phy_rx() const {
  return _internal_has_phy_rx();
}
inline void TelemetryData_WpanStats::clear_phy_rx() {
  phy_rx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_phy_rx() const {
  return phy_rx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::phy_rx() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.phy_rx)
  return _internal_phy_rx();
}
inline void TelemetryData_WpanStats::_internal_set_phy_rx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  phy_rx_ = value;
}
inline void TelemetryData_WpanStats::set_phy_rx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phy_rx(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.phy_rx)
}

// optional int32 phy_tx = 2;
inline bool TelemetryData_WpanStats::_internal_has_phy_tx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_phy_tx() const {
  return _internal_has_phy_tx();
}
inline void TelemetryData_WpanStats::clear_phy_tx() {
  phy_tx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_phy_tx() const {
  return phy_tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::phy_tx() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.phy_tx)
  return _internal_phy_tx();
}
inline void TelemetryData_WpanStats::_internal_set_phy_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  phy_tx_ = value;
}
inline void TelemetryData_WpanStats::set_phy_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phy_tx(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.phy_tx)
}

// optional int32 mac_unicast_rx = 3;
inline bool TelemetryData_WpanStats::_internal_has_mac_unicast_rx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_unicast_rx() const {
  return _internal_has_mac_unicast_rx();
}
inline void TelemetryData_WpanStats::clear_mac_unicast_rx() {
  mac_unicast_rx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_unicast_rx() const {
  return mac_unicast_rx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_unicast_rx() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_unicast_rx)
  return _internal_mac_unicast_rx();
}
inline void TelemetryData_WpanStats::_internal_set_mac_unicast_rx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mac_unicast_rx_ = value;
}
inline void TelemetryData_WpanStats::set_mac_unicast_rx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_unicast_rx(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_unicast_rx)
}

// optional int32 mac_unicast_tx = 4;
inline bool TelemetryData_WpanStats::_internal_has_mac_unicast_tx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_unicast_tx() const {
  return _internal_has_mac_unicast_tx();
}
inline void TelemetryData_WpanStats::clear_mac_unicast_tx() {
  mac_unicast_tx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_unicast_tx() const {
  return mac_unicast_tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_unicast_tx() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_unicast_tx)
  return _internal_mac_unicast_tx();
}
inline void TelemetryData_WpanStats::_internal_set_mac_unicast_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mac_unicast_tx_ = value;
}
inline void TelemetryData_WpanStats::set_mac_unicast_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_unicast_tx(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_unicast_tx)
}

// optional int32 mac_broadcast_rx = 5;
inline bool TelemetryData_WpanStats::_internal_has_mac_broadcast_rx() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_broadcast_rx() const {
  return _internal_has_mac_broadcast_rx();
}
inline void TelemetryData_WpanStats::clear_mac_broadcast_rx() {
  mac_broadcast_rx_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_broadcast_rx() const {
  return mac_broadcast_rx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_broadcast_rx() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_broadcast_rx)
  return _internal_mac_broadcast_rx();
}
inline void TelemetryData_WpanStats::_internal_set_mac_broadcast_rx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mac_broadcast_rx_ = value;
}
inline void TelemetryData_WpanStats::set_mac_broadcast_rx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_broadcast_rx(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_broadcast_rx)
}

// optional int32 mac_broadcast_tx = 6;
inline bool TelemetryData_WpanStats::_internal_has_mac_broadcast_tx() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_broadcast_tx() const {
  return _internal_has_mac_broadcast_tx();
}
inline void TelemetryData_WpanStats::clear_mac_broadcast_tx() {
  mac_broadcast_tx_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_broadcast_tx() const {
  return mac_broadcast_tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_broadcast_tx() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_broadcast_tx)
  return _internal_mac_broadcast_tx();
}
inline void TelemetryData_WpanStats::_internal_set_mac_broadcast_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  mac_broadcast_tx_ = value;
}
inline void TelemetryData_WpanStats::set_mac_broadcast_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_broadcast_tx(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_broadcast_tx)
}

// optional int32 mac_tx_ack_req = 7;
inline bool TelemetryData_WpanStats::_internal_has_mac_tx_ack_req() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_tx_ack_req() const {
  return _internal_has_mac_tx_ack_req();
}
inline void TelemetryData_WpanStats::clear_mac_tx_ack_req() {
  mac_tx_ack_req_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_tx_ack_req() const {
  return mac_tx_ack_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_tx_ack_req() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_tx_ack_req)
  return _internal_mac_tx_ack_req();
}
inline void TelemetryData_WpanStats::_internal_set_mac_tx_ack_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  mac_tx_ack_req_ = value;
}
inline void TelemetryData_WpanStats::set_mac_tx_ack_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_tx_ack_req(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_tx_ack_req)
}

// optional int32 mac_tx_no_ack_req = 8;
inline bool TelemetryData_WpanStats::_internal_has_mac_tx_no_ack_req() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_tx_no_ack_req() const {
  return _internal_has_mac_tx_no_ack_req();
}
inline void TelemetryData_WpanStats::clear_mac_tx_no_ack_req() {
  mac_tx_no_ack_req_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_tx_no_ack_req() const {
  return mac_tx_no_ack_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_tx_no_ack_req() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_tx_no_ack_req)
  return _internal_mac_tx_no_ack_req();
}
inline void TelemetryData_WpanStats::_internal_set_mac_tx_no_ack_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  mac_tx_no_ack_req_ = value;
}
inline void TelemetryData_WpanStats::set_mac_tx_no_ack_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_tx_no_ack_req(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_tx_no_ack_req)
}

// optional int32 mac_tx_acked = 9;
inline bool TelemetryData_WpanStats::_internal_has_mac_tx_acked() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_tx_acked() const {
  return _internal_has_mac_tx_acked();
}
inline void TelemetryData_WpanStats::clear_mac_tx_acked() {
  mac_tx_acked_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_tx_acked() const {
  return mac_tx_acked_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_tx_acked() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_tx_acked)
  return _internal_mac_tx_acked();
}
inline void TelemetryData_WpanStats::_internal_set_mac_tx_acked(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  mac_tx_acked_ = value;
}
inline void TelemetryData_WpanStats::set_mac_tx_acked(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_tx_acked(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_tx_acked)
}

// optional int32 mac_tx_data = 10;
inline bool TelemetryData_WpanStats::_internal_has_mac_tx_data() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_tx_data() const {
  return _internal_has_mac_tx_data();
}
inline void TelemetryData_WpanStats::clear_mac_tx_data() {
  mac_tx_data_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_tx_data() const {
  return mac_tx_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_tx_data() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_tx_data)
  return _internal_mac_tx_data();
}
inline void TelemetryData_WpanStats::_internal_set_mac_tx_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  mac_tx_data_ = value;
}
inline void TelemetryData_WpanStats::set_mac_tx_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_tx_data(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_tx_data)
}

// optional int32 mac_tx_data_poll = 11;
inline bool TelemetryData_WpanStats::_internal_has_mac_tx_data_poll() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_tx_data_poll() const {
  return _internal_has_mac_tx_data_poll();
}
inline void TelemetryData_WpanStats::clear_mac_tx_data_poll() {
  mac_tx_data_poll_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_tx_data_poll() const {
  return mac_tx_data_poll_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_tx_data_poll() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_tx_data_poll)
  return _internal_mac_tx_data_poll();
}
inline void TelemetryData_WpanStats::_internal_set_mac_tx_data_poll(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  mac_tx_data_poll_ = value;
}
inline void TelemetryData_WpanStats::set_mac_tx_data_poll(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_tx_data_poll(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_tx_data_poll)
}

// optional int32 mac_tx_beacon = 12;
inline bool TelemetryData_WpanStats::_internal_has_mac_tx_beacon() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_tx_beacon() const {
  return _internal_has_mac_tx_beacon();
}
inline void TelemetryData_WpanStats::clear_mac_tx_beacon() {
  mac_tx_beacon_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_tx_beacon() const {
  return mac_tx_beacon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_tx_beacon() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_tx_beacon)
  return _internal_mac_tx_beacon();
}
inline void TelemetryData_WpanStats::_internal_set_mac_tx_beacon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  mac_tx_beacon_ = value;
}
inline void TelemetryData_WpanStats::set_mac_tx_beacon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_tx_beacon(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_tx_beacon)
}

// optional int32 mac_tx_beacon_req = 13;
inline bool TelemetryData_WpanStats::_internal_has_mac_tx_beacon_req() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_tx_beacon_req() const {
  return _internal_has_mac_tx_beacon_req();
}
inline void TelemetryData_WpanStats::clear_mac_tx_beacon_req() {
  mac_tx_beacon_req_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_tx_beacon_req() const {
  return mac_tx_beacon_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_tx_beacon_req() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_tx_beacon_req)
  return _internal_mac_tx_beacon_req();
}
inline void TelemetryData_WpanStats::_internal_set_mac_tx_beacon_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  mac_tx_beacon_req_ = value;
}
inline void TelemetryData_WpanStats::set_mac_tx_beacon_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_tx_beacon_req(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_tx_beacon_req)
}

// optional int32 mac_tx_other_pkt = 14;
inline bool TelemetryData_WpanStats::_internal_has_mac_tx_other_pkt() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_tx_other_pkt() const {
  return _internal_has_mac_tx_other_pkt();
}
inline void TelemetryData_WpanStats::clear_mac_tx_other_pkt() {
  mac_tx_other_pkt_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_tx_other_pkt() const {
  return mac_tx_other_pkt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_tx_other_pkt() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_tx_other_pkt)
  return _internal_mac_tx_other_pkt();
}
inline void TelemetryData_WpanStats::_internal_set_mac_tx_other_pkt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  mac_tx_other_pkt_ = value;
}
inline void TelemetryData_WpanStats::set_mac_tx_other_pkt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_tx_other_pkt(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_tx_other_pkt)
}

// optional int32 mac_tx_retry = 15;
inline bool TelemetryData_WpanStats::_internal_has_mac_tx_retry() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_tx_retry() const {
  return _internal_has_mac_tx_retry();
}
inline void TelemetryData_WpanStats::clear_mac_tx_retry() {
  mac_tx_retry_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_tx_retry() const {
  return mac_tx_retry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_tx_retry() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_tx_retry)
  return _internal_mac_tx_retry();
}
inline void TelemetryData_WpanStats::_internal_set_mac_tx_retry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  mac_tx_retry_ = value;
}
inline void TelemetryData_WpanStats::set_mac_tx_retry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_tx_retry(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_tx_retry)
}

// optional int32 mac_rx_data = 16;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_data() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_data() const {
  return _internal_has_mac_rx_data();
}
inline void TelemetryData_WpanStats::clear_mac_rx_data() {
  mac_rx_data_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_data() const {
  return mac_rx_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_data() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_data)
  return _internal_mac_rx_data();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  mac_rx_data_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_data(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_data)
}

// optional int32 mac_rx_data_poll = 17;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_data_poll() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_data_poll() const {
  return _internal_has_mac_rx_data_poll();
}
inline void TelemetryData_WpanStats::clear_mac_rx_data_poll() {
  mac_rx_data_poll_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_data_poll() const {
  return mac_rx_data_poll_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_data_poll() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_data_poll)
  return _internal_mac_rx_data_poll();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_data_poll(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  mac_rx_data_poll_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_data_poll(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_data_poll(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_data_poll)
}

// optional int32 mac_rx_beacon = 18;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_beacon() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_beacon() const {
  return _internal_has_mac_rx_beacon();
}
inline void TelemetryData_WpanStats::clear_mac_rx_beacon() {
  mac_rx_beacon_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_beacon() const {
  return mac_rx_beacon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_beacon() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_beacon)
  return _internal_mac_rx_beacon();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_beacon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  mac_rx_beacon_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_beacon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_beacon(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_beacon)
}

// optional int32 mac_rx_beacon_req = 19;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_beacon_req() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_beacon_req() const {
  return _internal_has_mac_rx_beacon_req();
}
inline void TelemetryData_WpanStats::clear_mac_rx_beacon_req() {
  mac_rx_beacon_req_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_beacon_req() const {
  return mac_rx_beacon_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_beacon_req() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_beacon_req)
  return _internal_mac_rx_beacon_req();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_beacon_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  mac_rx_beacon_req_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_beacon_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_beacon_req(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_beacon_req)
}

// optional int32 mac_rx_other_pkt = 20;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_other_pkt() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_other_pkt() const {
  return _internal_has_mac_rx_other_pkt();
}
inline void TelemetryData_WpanStats::clear_mac_rx_other_pkt() {
  mac_rx_other_pkt_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_other_pkt() const {
  return mac_rx_other_pkt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_other_pkt() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_other_pkt)
  return _internal_mac_rx_other_pkt();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_other_pkt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  mac_rx_other_pkt_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_other_pkt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_other_pkt(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_other_pkt)
}

// optional int32 mac_rx_filter_whitelist = 21;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_filter_whitelist() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_filter_whitelist() const {
  return _internal_has_mac_rx_filter_whitelist();
}
inline void TelemetryData_WpanStats::clear_mac_rx_filter_whitelist() {
  mac_rx_filter_whitelist_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_filter_whitelist() const {
  return mac_rx_filter_whitelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_filter_whitelist() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_filter_whitelist)
  return _internal_mac_rx_filter_whitelist();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_filter_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  mac_rx_filter_whitelist_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_filter_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_filter_whitelist(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_filter_whitelist)
}

// optional int32 mac_rx_filter_dest_addr = 22;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_filter_dest_addr() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_filter_dest_addr() const {
  return _internal_has_mac_rx_filter_dest_addr();
}
inline void TelemetryData_WpanStats::clear_mac_rx_filter_dest_addr() {
  mac_rx_filter_dest_addr_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_filter_dest_addr() const {
  return mac_rx_filter_dest_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_filter_dest_addr() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_filter_dest_addr)
  return _internal_mac_rx_filter_dest_addr();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_filter_dest_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  mac_rx_filter_dest_addr_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_filter_dest_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_filter_dest_addr(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_filter_dest_addr)
}

// optional int32 mac_tx_fail_cca = 23;
inline bool TelemetryData_WpanStats::_internal_has_mac_tx_fail_cca() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_tx_fail_cca() const {
  return _internal_has_mac_tx_fail_cca();
}
inline void TelemetryData_WpanStats::clear_mac_tx_fail_cca() {
  mac_tx_fail_cca_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_tx_fail_cca() const {
  return mac_tx_fail_cca_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_tx_fail_cca() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_tx_fail_cca)
  return _internal_mac_tx_fail_cca();
}
inline void TelemetryData_WpanStats::_internal_set_mac_tx_fail_cca(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  mac_tx_fail_cca_ = value;
}
inline void TelemetryData_WpanStats::set_mac_tx_fail_cca(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_tx_fail_cca(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_tx_fail_cca)
}

// optional int32 mac_rx_fail_decrypt = 24;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_fail_decrypt() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_fail_decrypt() const {
  return _internal_has_mac_rx_fail_decrypt();
}
inline void TelemetryData_WpanStats::clear_mac_rx_fail_decrypt() {
  mac_rx_fail_decrypt_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_fail_decrypt() const {
  return mac_rx_fail_decrypt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_fail_decrypt() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_decrypt)
  return _internal_mac_rx_fail_decrypt();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_fail_decrypt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  mac_rx_fail_decrypt_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_fail_decrypt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_fail_decrypt(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_decrypt)
}

// optional int32 mac_rx_fail_no_frame = 25;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_fail_no_frame() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_fail_no_frame() const {
  return _internal_has_mac_rx_fail_no_frame();
}
inline void TelemetryData_WpanStats::clear_mac_rx_fail_no_frame() {
  mac_rx_fail_no_frame_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_fail_no_frame() const {
  return mac_rx_fail_no_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_fail_no_frame() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_no_frame)
  return _internal_mac_rx_fail_no_frame();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_fail_no_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  mac_rx_fail_no_frame_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_fail_no_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_fail_no_frame(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_no_frame)
}

// optional int32 mac_rx_fail_unknown_neighbor = 26;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_fail_unknown_neighbor() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_fail_unknown_neighbor() const {
  return _internal_has_mac_rx_fail_unknown_neighbor();
}
inline void TelemetryData_WpanStats::clear_mac_rx_fail_unknown_neighbor() {
  mac_rx_fail_unknown_neighbor_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_fail_unknown_neighbor() const {
  return mac_rx_fail_unknown_neighbor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_fail_unknown_neighbor() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_unknown_neighbor)
  return _internal_mac_rx_fail_unknown_neighbor();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_fail_unknown_neighbor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  mac_rx_fail_unknown_neighbor_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_fail_unknown_neighbor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_fail_unknown_neighbor(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_unknown_neighbor)
}

// optional int32 mac_rx_fail_invalid_src_addr = 27;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_fail_invalid_src_addr() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_fail_invalid_src_addr() const {
  return _internal_has_mac_rx_fail_invalid_src_addr();
}
inline void TelemetryData_WpanStats::clear_mac_rx_fail_invalid_src_addr() {
  mac_rx_fail_invalid_src_addr_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_fail_invalid_src_addr() const {
  return mac_rx_fail_invalid_src_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_fail_invalid_src_addr() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_invalid_src_addr)
  return _internal_mac_rx_fail_invalid_src_addr();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_fail_invalid_src_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  mac_rx_fail_invalid_src_addr_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_fail_invalid_src_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_fail_invalid_src_addr(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_invalid_src_addr)
}

// optional int32 mac_rx_fail_fcs = 28;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_fail_fcs() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_fail_fcs() const {
  return _internal_has_mac_rx_fail_fcs();
}
inline void TelemetryData_WpanStats::clear_mac_rx_fail_fcs() {
  mac_rx_fail_fcs_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_fail_fcs() const {
  return mac_rx_fail_fcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_fail_fcs() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_fcs)
  return _internal_mac_rx_fail_fcs();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_fail_fcs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  mac_rx_fail_fcs_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_fail_fcs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_fail_fcs(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_fcs)
}

// optional int32 mac_rx_fail_other = 29;
inline bool TelemetryData_WpanStats::_internal_has_mac_rx_fail_other() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_rx_fail_other() const {
  return _internal_has_mac_rx_fail_other();
}
inline void TelemetryData_WpanStats::clear_mac_rx_fail_other() {
  mac_rx_fail_other_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_mac_rx_fail_other() const {
  return mac_rx_fail_other_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::mac_rx_fail_other() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_other)
  return _internal_mac_rx_fail_other();
}
inline void TelemetryData_WpanStats::_internal_set_mac_rx_fail_other(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  mac_rx_fail_other_ = value;
}
inline void TelemetryData_WpanStats::set_mac_rx_fail_other(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mac_rx_fail_other(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_rx_fail_other)
}

// optional int32 ip_tx_success = 30;
inline bool TelemetryData_WpanStats::_internal_has_ip_tx_success() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_ip_tx_success() const {
  return _internal_has_ip_tx_success();
}
inline void TelemetryData_WpanStats::clear_ip_tx_success() {
  ip_tx_success_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_ip_tx_success() const {
  return ip_tx_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::ip_tx_success() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.ip_tx_success)
  return _internal_ip_tx_success();
}
inline void TelemetryData_WpanStats::_internal_set_ip_tx_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  ip_tx_success_ = value;
}
inline void TelemetryData_WpanStats::set_ip_tx_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip_tx_success(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.ip_tx_success)
}

// optional int32 ip_rx_success = 31;
inline bool TelemetryData_WpanStats::_internal_has_ip_rx_success() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_ip_rx_success() const {
  return _internal_has_ip_rx_success();
}
inline void TelemetryData_WpanStats::clear_ip_rx_success() {
  ip_rx_success_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_ip_rx_success() const {
  return ip_rx_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::ip_rx_success() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.ip_rx_success)
  return _internal_ip_rx_success();
}
inline void TelemetryData_WpanStats::_internal_set_ip_rx_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x40000000u;
  ip_rx_success_ = value;
}
inline void TelemetryData_WpanStats::set_ip_rx_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip_rx_success(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.ip_rx_success)
}

// optional int32 ip_tx_failure = 32;
inline bool TelemetryData_WpanStats::_internal_has_ip_tx_failure() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_ip_tx_failure() const {
  return _internal_has_ip_tx_failure();
}
inline void TelemetryData_WpanStats::clear_ip_tx_failure() {
  ip_tx_failure_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_ip_tx_failure() const {
  return ip_tx_failure_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::ip_tx_failure() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.ip_tx_failure)
  return _internal_ip_tx_failure();
}
inline void TelemetryData_WpanStats::_internal_set_ip_tx_failure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x80000000u;
  ip_tx_failure_ = value;
}
inline void TelemetryData_WpanStats::set_ip_tx_failure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip_tx_failure(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.ip_tx_failure)
}

// optional int32 ip_rx_failure = 33;
inline bool TelemetryData_WpanStats::_internal_has_ip_rx_failure() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_ip_rx_failure() const {
  return _internal_has_ip_rx_failure();
}
inline void TelemetryData_WpanStats::clear_ip_rx_failure() {
  ip_rx_failure_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_ip_rx_failure() const {
  return ip_rx_failure_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::ip_rx_failure() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.ip_rx_failure)
  return _internal_ip_rx_failure();
}
inline void TelemetryData_WpanStats::_internal_set_ip_rx_failure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  ip_rx_failure_ = value;
}
inline void TelemetryData_WpanStats::set_ip_rx_failure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip_rx_failure(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.ip_rx_failure)
}

// optional uint32 node_type = 34;
inline bool TelemetryData_WpanStats::_internal_has_node_type() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_node_type() const {
  return _internal_has_node_type();
}
inline void TelemetryData_WpanStats::clear_node_type() {
  node_type_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryData_WpanStats::_internal_node_type() const {
  return node_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryData_WpanStats::node_type() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.node_type)
  return _internal_node_type();
}
inline void TelemetryData_WpanStats::_internal_set_node_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  node_type_ = value;
}
inline void TelemetryData_WpanStats::set_node_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.node_type)
}

// optional uint32 channel = 35;
inline bool TelemetryData_WpanStats::_internal_has_channel() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_channel() const {
  return _internal_has_channel();
}
inline void TelemetryData_WpanStats::clear_channel() {
  channel_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryData_WpanStats::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryData_WpanStats::channel() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.channel)
  return _internal_channel();
}
inline void TelemetryData_WpanStats::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  channel_ = value;
}
inline void TelemetryData_WpanStats::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.channel)
}

// optional int32 radio_tx_power = 36;
inline bool TelemetryData_WpanStats::_internal_has_radio_tx_power() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_radio_tx_power() const {
  return _internal_has_radio_tx_power();
}
inline void TelemetryData_WpanStats::clear_radio_tx_power() {
  radio_tx_power_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::_internal_radio_tx_power() const {
  return radio_tx_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryData_WpanStats::radio_tx_power() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.radio_tx_power)
  return _internal_radio_tx_power();
}
inline void TelemetryData_WpanStats::_internal_set_radio_tx_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  radio_tx_power_ = value;
}
inline void TelemetryData_WpanStats::set_radio_tx_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_radio_tx_power(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.radio_tx_power)
}

// optional float mac_cca_fail_rate = 37;
inline bool TelemetryData_WpanStats::_internal_has_mac_cca_fail_rate() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool TelemetryData_WpanStats::has_mac_cca_fail_rate() const {
  return _internal_has_mac_cca_fail_rate();
}
inline void TelemetryData_WpanStats::clear_mac_cca_fail_rate() {
  mac_cca_fail_rate_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline float TelemetryData_WpanStats::_internal_mac_cca_fail_rate() const {
  return mac_cca_fail_rate_;
}
inline float TelemetryData_WpanStats::mac_cca_fail_rate() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.WpanStats.mac_cca_fail_rate)
  return _internal_mac_cca_fail_rate();
}
inline void TelemetryData_WpanStats::_internal_set_mac_cca_fail_rate(float value) {
  _has_bits_[1] |= 0x00000010u;
  mac_cca_fail_rate_ = value;
}
inline void TelemetryData_WpanStats::set_mac_cca_fail_rate(float value) {
  _internal_set_mac_cca_fail_rate(value);
  // @@protoc_insertion_point(field_set:threadnetwork.TelemetryData.WpanStats.mac_cca_fail_rate)
}

// -------------------------------------------------------------------

// TelemetryData

// optional .threadnetwork.TelemetryData.WpanStats wpan_stats = 1;
inline bool TelemetryData::_internal_has_wpan_stats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || wpan_stats_ != nullptr);
  return value;
}
inline bool TelemetryData::has_wpan_stats() const {
  return _internal_has_wpan_stats();
}
inline void TelemetryData::clear_wpan_stats() {
  if (wpan_stats_ != nullptr) wpan_stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::threadnetwork::TelemetryData_WpanStats& TelemetryData::_internal_wpan_stats() const {
  const ::threadnetwork::TelemetryData_WpanStats* p = wpan_stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::threadnetwork::TelemetryData_WpanStats*>(
      &::threadnetwork::_TelemetryData_WpanStats_default_instance_);
}
inline const ::threadnetwork::TelemetryData_WpanStats& TelemetryData::wpan_stats() const {
  // @@protoc_insertion_point(field_get:threadnetwork.TelemetryData.wpan_stats)
  return _internal_wpan_stats();
}
inline void TelemetryData::unsafe_arena_set_allocated_wpan_stats(
    ::threadnetwork::TelemetryData_WpanStats* wpan_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wpan_stats_);
  }
  wpan_stats_ = wpan_stats;
  if (wpan_stats) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:threadnetwork.TelemetryData.wpan_stats)
}
inline ::threadnetwork::TelemetryData_WpanStats* TelemetryData::release_wpan_stats() {
  auto temp = unsafe_arena_release_wpan_stats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::threadnetwork::TelemetryData_WpanStats* TelemetryData::unsafe_arena_release_wpan_stats() {
  // @@protoc_insertion_point(field_release:threadnetwork.TelemetryData.wpan_stats)
  _has_bits_[0] &= ~0x00000001u;
  ::threadnetwork::TelemetryData_WpanStats* temp = wpan_stats_;
  wpan_stats_ = nullptr;
  return temp;
}
inline ::threadnetwork::TelemetryData_WpanStats* TelemetryData::_internal_mutable_wpan_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (wpan_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::threadnetwork::TelemetryData_WpanStats>(GetArena());
    wpan_stats_ = p;
  }
  return wpan_stats_;
}
inline ::threadnetwork::TelemetryData_WpanStats* TelemetryData::mutable_wpan_stats() {
  // @@protoc_insertion_point(field_mutable:threadnetwork.TelemetryData.wpan_stats)
  return _internal_mutable_wpan_stats();
}
inline void TelemetryData::set_allocated_wpan_stats(::threadnetwork::TelemetryData_WpanStats* wpan_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wpan_stats_;
  }
  if (wpan_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wpan_stats);
    if (message_arena != submessage_arena) {
      wpan_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wpan_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  wpan_stats_ = wpan_stats;
  // @@protoc_insertion_point(field_set_allocated:threadnetwork.TelemetryData.wpan_stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace threadnetwork

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::threadnetwork::TelemetryData_NodeType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_thread_5ftelemetry_2eproto
