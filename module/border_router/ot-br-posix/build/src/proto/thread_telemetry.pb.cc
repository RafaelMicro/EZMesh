// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thread_telemetry.proto

#include "thread_telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_thread_5ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TelemetryData_WpanStats_thread_5ftelemetry_2eproto;
namespace threadnetwork {
class TelemetryData_WpanStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TelemetryData_WpanStats> _instance;
} _TelemetryData_WpanStats_default_instance_;
class TelemetryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TelemetryData> _instance;
} _TelemetryData_default_instance_;
}  // namespace threadnetwork
static void InitDefaultsscc_info_TelemetryData_thread_5ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::threadnetwork::_TelemetryData_default_instance_;
    new (ptr) ::threadnetwork::TelemetryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::threadnetwork::TelemetryData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TelemetryData_thread_5ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TelemetryData_thread_5ftelemetry_2eproto}, {
      &scc_info_TelemetryData_WpanStats_thread_5ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_TelemetryData_WpanStats_thread_5ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::threadnetwork::_TelemetryData_WpanStats_default_instance_;
    new (ptr) ::threadnetwork::TelemetryData_WpanStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::threadnetwork::TelemetryData_WpanStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TelemetryData_WpanStats_thread_5ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TelemetryData_WpanStats_thread_5ftelemetry_2eproto}, {}};

namespace threadnetwork {
bool TelemetryData_NodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TelemetryData_NodeType_strings[11] = {};

static const char TelemetryData_NodeType_names[] =
  "NODE_TYPE_COMMISSIONER"
  "NODE_TYPE_DETACHED"
  "NODE_TYPE_DISABLED"
  "NODE_TYPE_END"
  "NODE_TYPE_LEADER"
  "NODE_TYPE_MINIMAL_END"
  "NODE_TYPE_NL_LURKER"
  "NODE_TYPE_OFFLINE"
  "NODE_TYPE_ROUTER"
  "NODE_TYPE_SLEEPY_END"
  "NODE_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TelemetryData_NodeType_entries[] = {
  { {TelemetryData_NodeType_names + 0, 22}, 32 },
  { {TelemetryData_NodeType_names + 22, 18}, 7 },
  { {TelemetryData_NodeType_names + 40, 18}, 6 },
  { {TelemetryData_NodeType_names + 58, 13}, 2 },
  { {TelemetryData_NodeType_names + 71, 16}, 64 },
  { {TelemetryData_NodeType_names + 87, 21}, 4 },
  { {TelemetryData_NodeType_names + 108, 19}, 16 },
  { {TelemetryData_NodeType_names + 127, 17}, 5 },
  { {TelemetryData_NodeType_names + 144, 16}, 1 },
  { {TelemetryData_NodeType_names + 160, 20}, 3 },
  { {TelemetryData_NodeType_names + 180, 21}, 0 },
};

static const int TelemetryData_NodeType_entries_by_number[] = {
  10, // 0 -> NODE_TYPE_UNSPECIFIED
  8, // 1 -> NODE_TYPE_ROUTER
  3, // 2 -> NODE_TYPE_END
  9, // 3 -> NODE_TYPE_SLEEPY_END
  5, // 4 -> NODE_TYPE_MINIMAL_END
  7, // 5 -> NODE_TYPE_OFFLINE
  2, // 6 -> NODE_TYPE_DISABLED
  1, // 7 -> NODE_TYPE_DETACHED
  6, // 16 -> NODE_TYPE_NL_LURKER
  0, // 32 -> NODE_TYPE_COMMISSIONER
  4, // 64 -> NODE_TYPE_LEADER
};

const std::string& TelemetryData_NodeType_Name(
    TelemetryData_NodeType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TelemetryData_NodeType_entries,
          TelemetryData_NodeType_entries_by_number,
          11, TelemetryData_NodeType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TelemetryData_NodeType_entries,
      TelemetryData_NodeType_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TelemetryData_NodeType_strings[idx].get();
}
bool TelemetryData_NodeType_Parse(
    const std::string& name, TelemetryData_NodeType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TelemetryData_NodeType_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<TelemetryData_NodeType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_UNSPECIFIED;
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_ROUTER;
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_END;
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_SLEEPY_END;
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_MINIMAL_END;
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_OFFLINE;
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_DISABLED;
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_DETACHED;
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_NL_LURKER;
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_COMMISSIONER;
constexpr TelemetryData_NodeType TelemetryData::NODE_TYPE_LEADER;
constexpr TelemetryData_NodeType TelemetryData::NodeType_MIN;
constexpr TelemetryData_NodeType TelemetryData::NodeType_MAX;
constexpr int TelemetryData::NodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TelemetryData_WpanStats::InitAsDefaultInstance() {
}
class TelemetryData_WpanStats::_Internal {
 public:
  using HasBits = decltype(std::declval<TelemetryData_WpanStats>()._has_bits_);
  static void set_has_phy_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phy_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mac_unicast_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mac_unicast_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mac_broadcast_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mac_broadcast_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mac_tx_ack_req(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mac_tx_no_ack_req(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mac_tx_acked(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mac_tx_data(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mac_tx_data_poll(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mac_tx_beacon(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mac_tx_beacon_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mac_tx_other_pkt(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mac_tx_retry(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mac_rx_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_mac_rx_data_poll(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_mac_rx_beacon(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_mac_rx_beacon_req(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_mac_rx_other_pkt(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_mac_rx_filter_whitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_mac_rx_filter_dest_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_mac_tx_fail_cca(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_mac_rx_fail_decrypt(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_mac_rx_fail_no_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_mac_rx_fail_unknown_neighbor(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_mac_rx_fail_invalid_src_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_mac_rx_fail_fcs(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_mac_rx_fail_other(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_ip_tx_success(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_ip_rx_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ip_tx_failure(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_ip_rx_failure(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_node_type(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_radio_tx_power(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_mac_cca_fail_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
};

TelemetryData_WpanStats::TelemetryData_WpanStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:threadnetwork.TelemetryData.WpanStats)
}
TelemetryData_WpanStats::TelemetryData_WpanStats(const TelemetryData_WpanStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&phy_rx_, &from.phy_rx_,
    static_cast<size_t>(reinterpret_cast<char*>(&mac_cca_fail_rate_) -
    reinterpret_cast<char*>(&phy_rx_)) + sizeof(mac_cca_fail_rate_));
  // @@protoc_insertion_point(copy_constructor:threadnetwork.TelemetryData.WpanStats)
}

void TelemetryData_WpanStats::SharedCtor() {
  ::memset(&phy_rx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mac_cca_fail_rate_) -
      reinterpret_cast<char*>(&phy_rx_)) + sizeof(mac_cca_fail_rate_));
}

TelemetryData_WpanStats::~TelemetryData_WpanStats() {
  // @@protoc_insertion_point(destructor:threadnetwork.TelemetryData.WpanStats)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TelemetryData_WpanStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TelemetryData_WpanStats::ArenaDtor(void* object) {
  TelemetryData_WpanStats* _this = reinterpret_cast< TelemetryData_WpanStats* >(object);
  (void)_this;
}
void TelemetryData_WpanStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryData_WpanStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelemetryData_WpanStats& TelemetryData_WpanStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TelemetryData_WpanStats_thread_5ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void TelemetryData_WpanStats::Clear() {
// @@protoc_insertion_point(message_clear_start:threadnetwork.TelemetryData.WpanStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&phy_rx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mac_tx_no_ack_req_) -
        reinterpret_cast<char*>(&phy_rx_)) + sizeof(mac_tx_no_ack_req_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&mac_tx_acked_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mac_rx_data_) -
        reinterpret_cast<char*>(&mac_tx_acked_)) + sizeof(mac_rx_data_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&mac_rx_data_poll_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mac_rx_fail_decrypt_) -
        reinterpret_cast<char*>(&mac_rx_data_poll_)) + sizeof(mac_rx_fail_decrypt_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&mac_rx_fail_no_frame_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ip_tx_failure_) -
        reinterpret_cast<char*>(&mac_rx_fail_no_frame_)) + sizeof(ip_tx_failure_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ip_rx_failure_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mac_cca_fail_rate_) -
        reinterpret_cast<char*>(&ip_rx_failure_)) + sizeof(mac_cca_fail_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TelemetryData_WpanStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 phy_rx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_phy_rx(&_has_bits_);
          phy_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 phy_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_phy_tx(&_has_bits_);
          phy_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_unicast_rx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mac_unicast_rx(&_has_bits_);
          mac_unicast_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_unicast_tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mac_unicast_tx(&_has_bits_);
          mac_unicast_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_broadcast_rx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mac_broadcast_rx(&_has_bits_);
          mac_broadcast_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_broadcast_tx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mac_broadcast_tx(&_has_bits_);
          mac_broadcast_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_tx_ack_req = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mac_tx_ack_req(&_has_bits_);
          mac_tx_ack_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_tx_no_ack_req = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mac_tx_no_ack_req(&_has_bits_);
          mac_tx_no_ack_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_tx_acked = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_mac_tx_acked(&_has_bits_);
          mac_tx_acked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_tx_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_mac_tx_data(&_has_bits_);
          mac_tx_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_tx_data_poll = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_mac_tx_data_poll(&_has_bits_);
          mac_tx_data_poll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_tx_beacon = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_mac_tx_beacon(&_has_bits_);
          mac_tx_beacon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_tx_beacon_req = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_mac_tx_beacon_req(&_has_bits_);
          mac_tx_beacon_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_tx_other_pkt = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_mac_tx_other_pkt(&_has_bits_);
          mac_tx_other_pkt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_tx_retry = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_mac_tx_retry(&_has_bits_);
          mac_tx_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_mac_rx_data(&_has_bits_);
          mac_rx_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_data_poll = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_mac_rx_data_poll(&_has_bits_);
          mac_rx_data_poll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_beacon = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_mac_rx_beacon(&_has_bits_);
          mac_rx_beacon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_beacon_req = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_mac_rx_beacon_req(&_has_bits_);
          mac_rx_beacon_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_other_pkt = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_mac_rx_other_pkt(&_has_bits_);
          mac_rx_other_pkt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_filter_whitelist = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_mac_rx_filter_whitelist(&_has_bits_);
          mac_rx_filter_whitelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_filter_dest_addr = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_mac_rx_filter_dest_addr(&_has_bits_);
          mac_rx_filter_dest_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_tx_fail_cca = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_mac_tx_fail_cca(&_has_bits_);
          mac_tx_fail_cca_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_fail_decrypt = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_mac_rx_fail_decrypt(&_has_bits_);
          mac_rx_fail_decrypt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_fail_no_frame = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_mac_rx_fail_no_frame(&_has_bits_);
          mac_rx_fail_no_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_fail_unknown_neighbor = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_mac_rx_fail_unknown_neighbor(&_has_bits_);
          mac_rx_fail_unknown_neighbor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_fail_invalid_src_addr = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_mac_rx_fail_invalid_src_addr(&_has_bits_);
          mac_rx_fail_invalid_src_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_fail_fcs = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_mac_rx_fail_fcs(&_has_bits_);
          mac_rx_fail_fcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mac_rx_fail_other = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_mac_rx_fail_other(&_has_bits_);
          mac_rx_fail_other_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ip_tx_success = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_ip_tx_success(&_has_bits_);
          ip_tx_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ip_rx_success = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_ip_rx_success(&_has_bits_);
          ip_rx_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ip_tx_failure = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_ip_tx_failure(&_has_bits_);
          ip_tx_failure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ip_rx_failure = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ip_rx_failure(&_has_bits_);
          ip_rx_failure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 node_type = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_node_type(&_has_bits_);
          node_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_channel(&_has_bits_);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 radio_tx_power = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_radio_tx_power(&_has_bits_);
          radio_tx_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mac_cca_fail_rate = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_mac_cca_fail_rate(&_has_bits_);
          mac_cca_fail_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryData_WpanStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:threadnetwork.TelemetryData.WpanStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 phy_rx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_phy_rx(), target);
  }

  // optional int32 phy_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_phy_tx(), target);
  }

  // optional int32 mac_unicast_rx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mac_unicast_rx(), target);
  }

  // optional int32 mac_unicast_tx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mac_unicast_tx(), target);
  }

  // optional int32 mac_broadcast_rx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mac_broadcast_rx(), target);
  }

  // optional int32 mac_broadcast_tx = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mac_broadcast_tx(), target);
  }

  // optional int32 mac_tx_ack_req = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_mac_tx_ack_req(), target);
  }

  // optional int32 mac_tx_no_ack_req = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mac_tx_no_ack_req(), target);
  }

  // optional int32 mac_tx_acked = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_mac_tx_acked(), target);
  }

  // optional int32 mac_tx_data = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_mac_tx_data(), target);
  }

  // optional int32 mac_tx_data_poll = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_mac_tx_data_poll(), target);
  }

  // optional int32 mac_tx_beacon = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_mac_tx_beacon(), target);
  }

  // optional int32 mac_tx_beacon_req = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_mac_tx_beacon_req(), target);
  }

  // optional int32 mac_tx_other_pkt = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_mac_tx_other_pkt(), target);
  }

  // optional int32 mac_tx_retry = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_mac_tx_retry(), target);
  }

  // optional int32 mac_rx_data = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_mac_rx_data(), target);
  }

  // optional int32 mac_rx_data_poll = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_mac_rx_data_poll(), target);
  }

  // optional int32 mac_rx_beacon = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_mac_rx_beacon(), target);
  }

  // optional int32 mac_rx_beacon_req = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_mac_rx_beacon_req(), target);
  }

  // optional int32 mac_rx_other_pkt = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_mac_rx_other_pkt(), target);
  }

  // optional int32 mac_rx_filter_whitelist = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_mac_rx_filter_whitelist(), target);
  }

  // optional int32 mac_rx_filter_dest_addr = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_mac_rx_filter_dest_addr(), target);
  }

  // optional int32 mac_tx_fail_cca = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_mac_tx_fail_cca(), target);
  }

  // optional int32 mac_rx_fail_decrypt = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_mac_rx_fail_decrypt(), target);
  }

  // optional int32 mac_rx_fail_no_frame = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_mac_rx_fail_no_frame(), target);
  }

  // optional int32 mac_rx_fail_unknown_neighbor = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_mac_rx_fail_unknown_neighbor(), target);
  }

  // optional int32 mac_rx_fail_invalid_src_addr = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_mac_rx_fail_invalid_src_addr(), target);
  }

  // optional int32 mac_rx_fail_fcs = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_mac_rx_fail_fcs(), target);
  }

  // optional int32 mac_rx_fail_other = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_mac_rx_fail_other(), target);
  }

  // optional int32 ip_tx_success = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_ip_tx_success(), target);
  }

  // optional int32 ip_rx_success = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_ip_rx_success(), target);
  }

  // optional int32 ip_tx_failure = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_ip_tx_failure(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 ip_rx_failure = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_ip_rx_failure(), target);
  }

  // optional uint32 node_type = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_node_type(), target);
  }

  // optional uint32 channel = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_channel(), target);
  }

  // optional int32 radio_tx_power = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_radio_tx_power(), target);
  }

  // optional float mac_cca_fail_rate = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_mac_cca_fail_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:threadnetwork.TelemetryData.WpanStats)
  return target;
}

size_t TelemetryData_WpanStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:threadnetwork.TelemetryData.WpanStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 phy_rx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_phy_rx());
    }

    // optional int32 phy_tx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_phy_tx());
    }

    // optional int32 mac_unicast_rx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_unicast_rx());
    }

    // optional int32 mac_unicast_tx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_unicast_tx());
    }

    // optional int32 mac_broadcast_rx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_broadcast_rx());
    }

    // optional int32 mac_broadcast_tx = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_broadcast_tx());
    }

    // optional int32 mac_tx_ack_req = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_tx_ack_req());
    }

    // optional int32 mac_tx_no_ack_req = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_tx_no_ack_req());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 mac_tx_acked = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_tx_acked());
    }

    // optional int32 mac_tx_data = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_tx_data());
    }

    // optional int32 mac_tx_data_poll = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_tx_data_poll());
    }

    // optional int32 mac_tx_beacon = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_tx_beacon());
    }

    // optional int32 mac_tx_beacon_req = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_tx_beacon_req());
    }

    // optional int32 mac_tx_other_pkt = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_tx_other_pkt());
    }

    // optional int32 mac_tx_retry = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_tx_retry());
    }

    // optional int32 mac_rx_data = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_data());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 mac_rx_data_poll = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_data_poll());
    }

    // optional int32 mac_rx_beacon = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_beacon());
    }

    // optional int32 mac_rx_beacon_req = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_beacon_req());
    }

    // optional int32 mac_rx_other_pkt = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_other_pkt());
    }

    // optional int32 mac_rx_filter_whitelist = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_filter_whitelist());
    }

    // optional int32 mac_rx_filter_dest_addr = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_filter_dest_addr());
    }

    // optional int32 mac_tx_fail_cca = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_tx_fail_cca());
    }

    // optional int32 mac_rx_fail_decrypt = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_fail_decrypt());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 mac_rx_fail_no_frame = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_fail_no_frame());
    }

    // optional int32 mac_rx_fail_unknown_neighbor = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_fail_unknown_neighbor());
    }

    // optional int32 mac_rx_fail_invalid_src_addr = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_fail_invalid_src_addr());
    }

    // optional int32 mac_rx_fail_fcs = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_fail_fcs());
    }

    // optional int32 mac_rx_fail_other = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mac_rx_fail_other());
    }

    // optional int32 ip_tx_success = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ip_tx_success());
    }

    // optional int32 ip_rx_success = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ip_rx_success());
    }

    // optional int32 ip_tx_failure = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ip_tx_failure());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 ip_rx_failure = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ip_rx_failure());
    }

    // optional uint32 node_type = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_type());
    }

    // optional uint32 channel = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel());
    }

    // optional int32 radio_tx_power = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_radio_tx_power());
    }

    // optional float mac_cca_fail_rate = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryData_WpanStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TelemetryData_WpanStats*>(
      &from));
}

void TelemetryData_WpanStats::MergeFrom(const TelemetryData_WpanStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:threadnetwork.TelemetryData.WpanStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      phy_rx_ = from.phy_rx_;
    }
    if (cached_has_bits & 0x00000002u) {
      phy_tx_ = from.phy_tx_;
    }
    if (cached_has_bits & 0x00000004u) {
      mac_unicast_rx_ = from.mac_unicast_rx_;
    }
    if (cached_has_bits & 0x00000008u) {
      mac_unicast_tx_ = from.mac_unicast_tx_;
    }
    if (cached_has_bits & 0x00000010u) {
      mac_broadcast_rx_ = from.mac_broadcast_rx_;
    }
    if (cached_has_bits & 0x00000020u) {
      mac_broadcast_tx_ = from.mac_broadcast_tx_;
    }
    if (cached_has_bits & 0x00000040u) {
      mac_tx_ack_req_ = from.mac_tx_ack_req_;
    }
    if (cached_has_bits & 0x00000080u) {
      mac_tx_no_ack_req_ = from.mac_tx_no_ack_req_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mac_tx_acked_ = from.mac_tx_acked_;
    }
    if (cached_has_bits & 0x00000200u) {
      mac_tx_data_ = from.mac_tx_data_;
    }
    if (cached_has_bits & 0x00000400u) {
      mac_tx_data_poll_ = from.mac_tx_data_poll_;
    }
    if (cached_has_bits & 0x00000800u) {
      mac_tx_beacon_ = from.mac_tx_beacon_;
    }
    if (cached_has_bits & 0x00001000u) {
      mac_tx_beacon_req_ = from.mac_tx_beacon_req_;
    }
    if (cached_has_bits & 0x00002000u) {
      mac_tx_other_pkt_ = from.mac_tx_other_pkt_;
    }
    if (cached_has_bits & 0x00004000u) {
      mac_tx_retry_ = from.mac_tx_retry_;
    }
    if (cached_has_bits & 0x00008000u) {
      mac_rx_data_ = from.mac_rx_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mac_rx_data_poll_ = from.mac_rx_data_poll_;
    }
    if (cached_has_bits & 0x00020000u) {
      mac_rx_beacon_ = from.mac_rx_beacon_;
    }
    if (cached_has_bits & 0x00040000u) {
      mac_rx_beacon_req_ = from.mac_rx_beacon_req_;
    }
    if (cached_has_bits & 0x00080000u) {
      mac_rx_other_pkt_ = from.mac_rx_other_pkt_;
    }
    if (cached_has_bits & 0x00100000u) {
      mac_rx_filter_whitelist_ = from.mac_rx_filter_whitelist_;
    }
    if (cached_has_bits & 0x00200000u) {
      mac_rx_filter_dest_addr_ = from.mac_rx_filter_dest_addr_;
    }
    if (cached_has_bits & 0x00400000u) {
      mac_tx_fail_cca_ = from.mac_tx_fail_cca_;
    }
    if (cached_has_bits & 0x00800000u) {
      mac_rx_fail_decrypt_ = from.mac_rx_fail_decrypt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mac_rx_fail_no_frame_ = from.mac_rx_fail_no_frame_;
    }
    if (cached_has_bits & 0x02000000u) {
      mac_rx_fail_unknown_neighbor_ = from.mac_rx_fail_unknown_neighbor_;
    }
    if (cached_has_bits & 0x04000000u) {
      mac_rx_fail_invalid_src_addr_ = from.mac_rx_fail_invalid_src_addr_;
    }
    if (cached_has_bits & 0x08000000u) {
      mac_rx_fail_fcs_ = from.mac_rx_fail_fcs_;
    }
    if (cached_has_bits & 0x10000000u) {
      mac_rx_fail_other_ = from.mac_rx_fail_other_;
    }
    if (cached_has_bits & 0x20000000u) {
      ip_tx_success_ = from.ip_tx_success_;
    }
    if (cached_has_bits & 0x40000000u) {
      ip_rx_success_ = from.ip_rx_success_;
    }
    if (cached_has_bits & 0x80000000u) {
      ip_tx_failure_ = from.ip_tx_failure_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ip_rx_failure_ = from.ip_rx_failure_;
    }
    if (cached_has_bits & 0x00000002u) {
      node_type_ = from.node_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000008u) {
      radio_tx_power_ = from.radio_tx_power_;
    }
    if (cached_has_bits & 0x00000010u) {
      mac_cca_fail_rate_ = from.mac_cca_fail_rate_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void TelemetryData_WpanStats::CopyFrom(const TelemetryData_WpanStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:threadnetwork.TelemetryData.WpanStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryData_WpanStats::IsInitialized() const {
  return true;
}

void TelemetryData_WpanStats::InternalSwap(TelemetryData_WpanStats* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetryData_WpanStats, mac_cca_fail_rate_)
      + sizeof(TelemetryData_WpanStats::mac_cca_fail_rate_)
      - PROTOBUF_FIELD_OFFSET(TelemetryData_WpanStats, phy_rx_)>(
          reinterpret_cast<char*>(&phy_rx_),
          reinterpret_cast<char*>(&other->phy_rx_));
}

std::string TelemetryData_WpanStats::GetTypeName() const {
  return "threadnetwork.TelemetryData.WpanStats";
}


// ===================================================================

void TelemetryData::InitAsDefaultInstance() {
  ::threadnetwork::_TelemetryData_default_instance_._instance.get_mutable()->wpan_stats_ = const_cast< ::threadnetwork::TelemetryData_WpanStats*>(
      ::threadnetwork::TelemetryData_WpanStats::internal_default_instance());
}
class TelemetryData::_Internal {
 public:
  using HasBits = decltype(std::declval<TelemetryData>()._has_bits_);
  static const ::threadnetwork::TelemetryData_WpanStats& wpan_stats(const TelemetryData* msg);
  static void set_has_wpan_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::threadnetwork::TelemetryData_WpanStats&
TelemetryData::_Internal::wpan_stats(const TelemetryData* msg) {
  return *msg->wpan_stats_;
}
TelemetryData::TelemetryData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:threadnetwork.TelemetryData)
}
TelemetryData::TelemetryData(const TelemetryData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_wpan_stats()) {
    wpan_stats_ = new ::threadnetwork::TelemetryData_WpanStats(*from.wpan_stats_);
  } else {
    wpan_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:threadnetwork.TelemetryData)
}

void TelemetryData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TelemetryData_thread_5ftelemetry_2eproto.base);
  wpan_stats_ = nullptr;
}

TelemetryData::~TelemetryData() {
  // @@protoc_insertion_point(destructor:threadnetwork.TelemetryData)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TelemetryData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete wpan_stats_;
}

void TelemetryData::ArenaDtor(void* object) {
  TelemetryData* _this = reinterpret_cast< TelemetryData* >(object);
  (void)_this;
}
void TelemetryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelemetryData& TelemetryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TelemetryData_thread_5ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void TelemetryData::Clear() {
// @@protoc_insertion_point(message_clear_start:threadnetwork.TelemetryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(wpan_stats_ != nullptr);
    wpan_stats_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TelemetryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .threadnetwork.TelemetryData.WpanStats wpan_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wpan_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:threadnetwork.TelemetryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .threadnetwork.TelemetryData.WpanStats wpan_stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::wpan_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:threadnetwork.TelemetryData)
  return target;
}

size_t TelemetryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:threadnetwork.TelemetryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .threadnetwork.TelemetryData.WpanStats wpan_stats = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wpan_stats_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TelemetryData*>(
      &from));
}

void TelemetryData::MergeFrom(const TelemetryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:threadnetwork.TelemetryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wpan_stats()) {
    _internal_mutable_wpan_stats()->::threadnetwork::TelemetryData_WpanStats::MergeFrom(from._internal_wpan_stats());
  }
}

void TelemetryData::CopyFrom(const TelemetryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:threadnetwork.TelemetryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryData::IsInitialized() const {
  return true;
}

void TelemetryData::InternalSwap(TelemetryData* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wpan_stats_, other->wpan_stats_);
}

std::string TelemetryData::GetTypeName() const {
  return "threadnetwork.TelemetryData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace threadnetwork
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::threadnetwork::TelemetryData_WpanStats* Arena::CreateMaybeMessage< ::threadnetwork::TelemetryData_WpanStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::threadnetwork::TelemetryData_WpanStats >(arena);
}
template<> PROTOBUF_NOINLINE ::threadnetwork::TelemetryData* Arena::CreateMaybeMessage< ::threadnetwork::TelemetryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::threadnetwork::TelemetryData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
